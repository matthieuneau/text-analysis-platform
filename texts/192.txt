topics covered : encapsulation, inheritance, shadowing instructor : prof. eric grimson, prof. john guttag operator : the following content is provided under a creative commons license. your support will help mit opencourseware continue to offer high quality educational resources for free. to make a donation or view additional materials from hundreds of mit courses, visit mit opencourseware at ocw. mit. edu. professor : last lecture we were talking about classes, and object - oriented programming, and we're going to come back to it today. i'm going to remind you, we were talking about it because we suggested it is a really powerful way of structuring systems, and that's really why we want to use it, it's a very common way of structuring systems. so today i'm going to pick up on a bunch of more nuanced, or more complex if you like, ways of leveraging the power of classes. but we're going to see a bunch of examples that are going to give us a sense. i'm going to talk about inheritance, we're going to talk about shadowing, we're going to talk about iterators. but before get to it, i want to start by just highlighting, sort of, what was the point of classes? so i'll remind you. a class, i said, was basically a template for an abstract data type. and this was really to drive home this idea of modularity. i want the ability to say, i've got a set of things that naturally belong together, i'm going to cluster them together, i want to treat it like it