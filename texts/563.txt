is a c based interpreter ( runloop ) that executes, what different compiler ( like mildew ) produce. if you want to help smop, you can just take on one of the lowlevel s1p implementations and write it. if you have any questions ask ruoso or pmurias at # perl6 @ irc. freenode. org. the slides for the talk perl 6 is just a smop are available, it introduces a bit of the reasoning behind smop. a newer version of the talk presented at yapc : : eu 2008 is available smop is an alternative implementation of a c engine to run perl 6. it is focused in getting the most pragmatic approach possible, but still focusing in being able to support all perl 6 features. its core resembles perl 5 in some ways, and it differs from parrot in many ways, including the fact that smop is not a virtual machine. smop is simply a runtime engine that happens to have a interpreter run loop. the main difference between smop and parrot ( besides the not - being - a - vm thing ), is that smop is from bottom - up an implementation of the perl 6 oo features, in a way that smop should be able to do a full bootstrap of the perl 6 type system. parrot on the other hand have a much more static low - level implementation ( the pmc ) the same way pge is a project on top of parrot, smop will need a grammar engine for itself. smop is the implementation that is stressing the meta object protocol more than any other implementation, and so far that has been a very fruit