major section : break - rewrite example : ( brr @ : target ) ; the term being rewritten ( brr @ : unify - subst ) ; the unifying substitutionwhere general form : ( brr @ : symbol ) : symbolis one of the following keywords. those marked with * probably require an implementor's knowledge of the system to use effectively. they are supported but not well documented. more is said on this topic following the table. : symbol ( brr @ : symbol ) - - - - - - - - - - - - - - - - - - - - - - - - - - - - in general : target the term to be rewritten. this term is an instantiation of the left - hand side of the conclusion of the rewrite - rule being broken. this term is in translated form! thus, if you are expecting ( equal x nil ) - - and your expectation is almost right - - you will see ( equal x'nil ) ; similarly, instead of ( cadr a ) you will see ( car ( cdr a ) ). in translated forms, all constants are quoted ( even nil, t, strings and numbers ) and all macros are expanded. : unify - subst the substitution that, when applied to : target, produces the left - hand side of the rule being broken. this substitution is an alist pairing variable symbols to translated (! ) terms. : wonp t or nil indicating whether the rune was successfully applied. ( brr @ : wonp ) returns nil if evaluated before : evaling the rule. : rewritten - rhs the result of successfully applying